apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

ext {
    bintrayRepo = 'quadible'
    bintrayName = 'IndieDialog'

    publishedGroupId = 'com.quadible'
    libraryName = 'indiedialog'
    artifact = 'indiedialog'

    libraryDescription = 'Easy simple dialog builder, which is independent of Activity'

    siteUrl = 'https://github.com/St4B/IndieDialog'
    gitUrl = 'https://github.com/St4B/IndieDialog.git'

    libraryVersion = '1.0.0'

    developerId = 'St4B'
    developerName = 'Vaios Tsitsonis'
    developerEmail = 'v.tsitsonis@quadible.co.uk'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

android {
    compileSdkVersion 28



    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

apply from: rootProject.projectDir.toString() + '/buildsystem/install.gradle'
apply from: rootProject.projectDir.toString() + '/buildsystem/bintray.gradle'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    def dependencies = rootProject.ext.dependencies
    implementation dependencies.appCompat
    implementation dependencies.activityJobExecutor
}

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/" + artifact + "-release.aar")
            groupId publishedGroupId
            artifactId artifact
            version libraryVersion

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
